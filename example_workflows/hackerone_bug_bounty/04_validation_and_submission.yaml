description: |
  [This is Phase 4 - Rigorous Validation & Professional Submission]

  FOCUS: Rigorously validate ONE vulnerability through comprehensive testing,
  create a professional HackerOne-formatted report, and submit ONLY if ALL
  validation criteria are met.

  This is the final quality gate. Better to reject a borderline finding than
  risk program ban for submitting out-of-scope or low-quality reports.

Done_Definitions:
  - OVERVIEW.md and compliance_rules.md have been read
  - Investigation report from Phase 3 has been reviewed
  - Memories fetched for validation approaches and similar findings
  - "RIGOROUS 5-POINT VALIDATION COMPLETED:"
  - "  1. Reproducibility: Bug reproduced 3+ times successfully"
  - "  2. Asset Scope: Asset confirmed in-scope per allowed_domain.txt and OVERVIEW.md"
  - "  3. Vulnerability Scope: Vulnerability type confirmed in-scope per OVERVIEW.md"
  - "  4. NOT Out-of-Scope: Confirmed NOT in out-of-scope list"
  - "  5. Real Impact: Real security impact demonstrated (not theoretical)"
  - "Professional HackerOne report created (if all validations pass)"
  - "submit_result called with complete evidence (if all validations pass)"
  - "Validation results saved to memory"
  - "Optional: New Phase 2/3 tasks created for discoveries during validation"

working_directory: "."

validation:
  enabled: true
  criteria:
    - description: "Validation checklist completed"
      check_type: "file_exists"
      target: ["validation_*.md", "validation_report_*.md"]
      evidence_required: true

    - description: "All 5 validation points addressed"
      check_type: "file_contains"
      target: "validation_*.md"
      pattern: ["reproducibility", "scope", "impact"]

    - description: "HackerOne report created (if valid)"
      check_type: "manual_verification"
      evidence_required: false

    - description: "Result submitted (if valid)"
      check_type: "manual_verification"
      evidence_required: false

    - description: "Validation results saved to memory"
      check_type: "manual_verification"
      evidence_required: true

  validator_instructions: |
    Verify that:
    - All 5 validation points were thoroughly checked
    - Reproducibility was tested multiple times
    - Scope validation was rigorous
    - Security impact is real and documented
    - If submitted: HackerOne report format is correct
    - If submitted: All evidence is included
    - If rejected: Clear explanation of why
    - Validation results saved to memory

    Note: Rejecting a borderline finding is the right decision.
    Only approve submissions with crystal-clear validity.

Additional_Notes: |
  ⚖️  YOU ARE THE FINAL QUALITY GATE ⚖️

  Your job is to ensure ONLY high-quality, in-scope, reproducible
  vulnerabilities get submitted to HackerOne. Bad submissions can
  result in program bans and damage the security researcher community.

  ═══════════════════════════════════════════════════════════════════════
  STEP 1: PREPARATION AND CONTEXT REVIEW
  ═══════════════════════════════════════════════════════════════════════

  MANDATORY READING:
  1. OVERVIEW.md - Review scope and severity definitions
  2. compliance_rules.md - Verify no violations occurred
  3. scope_analysis.md - Confirm scope boundaries
  4. Investigation report from Phase 3 - Understand the finding

  FETCH MEMORIES:
  - Have we submitted this type of vulnerability before?
  - What validation approaches have worked?
  - Are there any duplicate reports?
  - What evidence format is expected?
  - Any warnings about this program?

  ═══════════════════════════════════════════════════════════════════════
  STEP 2: RIGOROUS 5-POINT VALIDATION
  ═══════════════════════════════════════════════════════════════════════

  You MUST validate ALL 5 points. If ANY fails, DO NOT SUBMIT.

  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  VALIDATION POINT 1: REPRODUCIBILITY
  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  Test: Can you reproduce the bug consistently?

  Actions:
  1. Read the PoC from Phase 3 investigation report
  2. Follow the exact reproduction steps
  3. Reproduce the bug at least 3 times
  4. Verify it works every time (not intermittent)
  5. Test from fresh browser session / cleared cache
  6. Verify prerequisites are clearly documented

  Questions to answer:
  - Does it reproduce 100% of the time?
  - Are the steps clear and complete?
  - Could a stranger follow these steps?
  - Are all prerequisites listed?
  - Is the PoC minimal (no unnecessary steps)?

  Example testing log:
  ```
  Attempt 1: ✅ Reproduced successfully
  Attempt 2: ✅ Reproduced successfully
  Attempt 3: ✅ Reproduced successfully

  Conclusion: PASS - Consistently reproducible
  ```

  If reproduction fails or is inconsistent → VALIDATION FAILS → DO NOT SUBMIT

  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  VALIDATION POINT 2: ASSET SCOPE COMPLIANCE
  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  Test: Is the asset in-scope for the program?

  Actions:
  1. Check the vulnerable URL/endpoint
  2. Verify it's within allowed_domain.txt
  3. Check OVERVIEW.md in-scope assets section
  4. Verify it's NOT in out-of-scope assets list
  5. Confirm not a third-party service

  Questions to answer:
  - Is the domain in allowed_domain.txt?
  - Is it explicitly listed as in-scope in OVERVIEW.md?
  - Is it explicitly listed as OUT-of-scope anywhere?
  - Is it a subdomain that might be out-of-scope?
  - Is it a third-party service?

  Example validation:
  ```
  Vulnerable URL: https://api.example.com/user

  Check 1: In allowed_domain.txt? ✅ Yes - example.com
  Check 2: In OVERVIEW.md in-scope? ✅ Yes - api.example.com listed
  Check 3: In out-of-scope list? ✅ No - not listed
  Check 4: Third-party service? ✅ No - owned by program

  Conclusion: PASS - Asset is in-scope
  ```

  If asset is out-of-scope → VALIDATION FAILS → DO NOT SUBMIT

  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  VALIDATION POINT 3: VULNERABILITY TYPE SCOPE COMPLIANCE
  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  Test: Is the vulnerability type in-scope?

  Actions:
  1. Identify the vulnerability type (XSS, IDOR, SQLi, etc.)
  2. Check OVERVIEW.md in-scope vulnerability types
  3. Verify it's NOT in out-of-scope vulnerability types
  4. Check for specific exclusions (e.g., "Self-XSS is out-of-scope")

  Questions to answer:
  - What vulnerability type is this exactly?
  - Is it in the in-scope list?
  - Is it in the out-of-scope list?
  - Are there specific conditions that make it out-of-scope?
  - Does it meet the program's definition of this vuln type?

  Common out-of-scope variations to check:
  - Self-XSS (vs reflected/stored XSS)
  - Theoretical DoS (vs actual DoS which is usually forbidden)
  - Clickjacking without impact
  - Missing headers without exploitability
  - Verbose errors without sensitive data

  Example validation:
  ```
  Vulnerability Type: Broken Access Control (IDOR)

  Check 1: In-scope list? ✅ Yes - "Broken Access Control" listed
  Check 2: Out-of-scope list? ✅ No - not listed
  Check 3: Specific exclusions? ✅ No - general IDOR is in-scope

  Conclusion: PASS - Vulnerability type is in-scope
  ```

  If vulnerability type is out-of-scope → VALIDATION FAILS → DO NOT SUBMIT

  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  VALIDATION POINT 4: NOT IN OUT-OF-SCOPE LIST
  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  Test: Double-check against ALL out-of-scope items

  Actions:
  1. Re-read ENTIRE out-of-scope section in OVERVIEW.md
  2. Check for subtle exclusions
  3. Verify no "except when" clauses apply
  4. Check program-specific exclusions

  Common program-specific out-of-scope items:
  - SPF/DMARC records
  - Rate limiting bypass (sometimes)
  - Account enumeration (sometimes)
  - Cache poisoning (sometimes)
  - Specific endpoints or features
  - Zero-day vulnerabilities within X days of publication

  Example validation:
  ```
  Re-reading out-of-scope section...

  "Out of scope: [...list...]"
  ✅ My finding is not in this list

  "Exceptions: Self-exploitation is not accepted"
  ✅ My finding is not self-exploitation

  Conclusion: PASS - Not in any out-of-scope category
  ```

  If found in ANY out-of-scope category → VALIDATION FAILS → DO NOT SUBMIT

  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  VALIDATION POINT 5: REAL SECURITY IMPACT
  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  Test: Does this have real, exploitable security impact?

  Actions:
  1. Review the attack scenario from Phase 3
  2. Verify impact is REAL not theoretical
  3. Check against program's severity definitions
  4. Confirm business risk exists

  Questions to answer:
  - Can an attacker actually exploit this in practice?
  - What data/functionality can they access/modify?
  - How does this violate confidentiality/integrity/availability?
  - What is the business risk to the organization?
  - Is this exploitable without unlikely conditions?

  RED FLAGS (likely to be rejected):
  ❌ "An attacker could theoretically..."
  ❌ "If a user is tricked into..."  (for self-XSS)
  ❌ "With physical access to the machine..."
  ❌ "By social engineering an admin..."
  ❌ No clear security boundary is violated
  ❌ Requires admin/privileged access to exploit

  GREEN FLAGS (likely to be accepted):
  ✅ "An attacker can access other users' PII by..."
  ✅ "An authenticated user can escalate to admin by..."
  ✅ "An anonymous attacker can execute code by..."
  ✅ Clear violation of security boundary
  ✅ Realistic attack scenario
  ✅ Demonstrated with working PoC

  Example validation:
  ```
  Vulnerability: IDOR in /api/user endpoint

  Impact Analysis:
  - Can access: ✅ Other users' PII (email, phone, address)
  - Can modify: ✅ Other users' profiles
  - Attack scenario: ✅ Realistic (just change user_id)
  - Business risk: ✅ High (PII exposure, GDPR violation)
  - Working PoC: ✅ Yes, demonstrated

  Severity per program definitions: HIGH

  Conclusion: PASS - Real, exploitable security impact
  ```

  If impact is theoretical or unclear → VALIDATION FAILS → DO NOT SUBMIT

  ═══════════════════════════════════════════════════════════════════════
  STEP 3: VALIDATION DECISION
  ═══════════════════════════════════════════════════════════════════════

  Review your 5-point validation:

  Point 1 - Reproducibility: ✅ PASS / ❌ FAIL
  Point 2 - Asset Scope: ✅ PASS / ❌ FAIL
  Point 3 - Vulnerability Type Scope: ✅ PASS / ❌ FAIL
  Point 4 - Not Out-of-Scope: ✅ PASS / ❌ FAIL
  Point 5 - Real Impact: ✅ PASS / ❌ FAIL

  IF ALL 5 ARE ✅ PASS:
  → Proceed to Step 4 (Create HackerOne Report)

  IF ANY ARE ❌ FAIL:
  → Skip to Step 6 (Document Rejection)
  → DO NOT SUBMIT

  When in doubt → DO NOT SUBMIT
  Better to be conservative than risk program ban.

  ═══════════════════════════════════════════════════════════════════════
  STEP 4: CREATE PROFESSIONAL HACKERONE REPORT (IF ALL VALIDATIONS PASS)
  ═══════════════════════════════════════════════════════════════════════

  Only reach this step if ALL 5 validations passed.

  Create a markdown file: validated_bug_[ID].md

  Use this EXACT format:

  ```markdown
  # Vulnerability Report: [Vulnerability Type] in [Asset]

  ## Summary:
  [2-3 sentences clearly describing the vulnerability]

  [Example: "The /api/user endpoint suffers from an Insecure Direct Object
  Reference (IDOR) vulnerability that allows any authenticated user to access
  and modify other users' profile data by manipulating the user_id parameter."]

  ## Steps To Reproduce:

    1. [First step - be specific]
       [Example: "Create two test accounts: victim@wearehackerone.com and
       attacker@wearehackerone.com"]

    2. [Second step - include exact values]
       [Example: "Log in as victim and note the user_id in the profile URL:
       https://example.com/profile?user_id=123"]

    3. [Third step - show the attack]
       [Example: "Log out and log in as attacker. Navigate to
       https://example.com/api/user/123 (victim's ID)"]

    4. [Result]
       [Example: "Observe that victim's full profile data is returned,
       including email, phone number, and address"]

  ## Impact:
  [Detailed explanation of security impact]

  [Example: "An authenticated attacker can:
  - Access any user's personal information (PII) including email, phone, address
  - Modify any user's profile data
  - Enumerate all users by iterating user IDs

  This violates user privacy, exposes PII that could be used for phishing or
  social engineering, and may constitute a GDPR violation. The business risk
  includes reputational damage and regulatory fines.

  Severity: HIGH (per program's severity definitions)"]

  ## Supporting Material/References:

    * Screenshot 1: Attacker accessing victim's data
    * Screenshot 2: Network request showing user_id parameter manipulation
    * PoC script: poc_idor_user_endpoint.py
    * Tested on: [Date] at [Time]

  ## Proof of Concept Code:
  ```python
  [Include your PoC script here]
  ```

  ## Remediation Recommendations:
  [Optional but appreciated - suggest how to fix]

  [Example: "Implement proper authorization checks on the /api/user endpoint
  to verify that the requesting user has permission to access the requested
  user_id. Compare the authenticated user's ID with the requested user_id
  before returning data."]
  ```

  CRITICAL FORMATTING NOTES:
  - Use "## Summary:" not "# Summary" (two hashes)
  - Use numbered lists for Steps To Reproduce (with proper indentation)
  - Include specific URLs, parameters, values
  - Attach screenshots and PoC code
  - Professional tone throughout
  - No typos or grammar errors

  ═══════════════════════════════════════════════════════════════════════
  STEP 5: SUBMIT RESULT (IF ALL VALIDATIONS PASS)
  ═══════════════════════════════════════════════════════════════════════

  Only reach this step if:
  ✅ All 5 validations passed
  ✅ Professional HackerOne report created
  ✅ All evidence gathered

  Use the submit_result MCP endpoint:

  ```
  mcp__hephaestus__submit_result({
    "markdown_file_path": "/full/path/to/validated_bug_[ID].md",
    "agent_id": "your_agent_id",
    "explanation": "Validated [VULN_TYPE] vulnerability in [ASSET] - all scope checks passed, reproducible with PoC, HIGH severity",
    "evidence": [
      "Reproduced 3+ times successfully",
      "Asset and vuln type confirmed in-scope",
      "Real security impact: PII exposure",
      "Professional HackerOne format report",
      "Working PoC included"
    ]
  })
  ```

  The workflow result validator will then verify your submission.

  ═══════════════════════════════════════════════════════════════════════
  STEP 6: DOCUMENT REJECTION (IF ANY VALIDATION FAILED)
  ═══════════════════════════════════════════════════════════════════════

  If ANY validation failed, create rejection_[ID].md:

  ```markdown
  # Validation Rejection Report

  ## Vulnerability Investigated
  [Brief description]

  ## Validation Results

  1. Reproducibility: ✅ PASS / ❌ FAIL
     [If FAIL: Explain why - intermittent, steps unclear, etc.]

  2. Asset Scope: ✅ PASS / ❌ FAIL
     [If FAIL: Explain - out-of-scope domain, third-party, etc.]

  3. Vulnerability Type Scope: ✅ PASS / ❌ FAIL
     [If FAIL: Explain - out-of-scope vuln type, specific exclusion, etc.]

  4. Not Out-of-Scope: ✅ PASS / ❌ FAIL
     [If FAIL: Explain - matches out-of-scope item, etc.]

  5. Real Impact: ✅ PASS / ❌ FAIL
     [If FAIL: Explain - theoretical only, no real impact, etc.]

  ## Decision
  ❌ REJECTED - Do not submit to HackerOne

  ## Reason
  [Detailed explanation of why this was rejected]

  ## Learning
  [What we learned from this investigation]
  ```

  DO NOT SUBMIT if rejected. Save to memory instead.

  ═══════════════════════════════════════════════════════════════════════
  STEP 7: SAVE TO MEMORY (CRITICAL)
  ═══════════════════════════════════════════════════════════════════════

  If SUBMITTED:
  ```
  save_memory(
    content="SUBMITTED: [VULN_TYPE] in [ASSET] - validated and submitted to HackerOne. Report ID: [ID]. Severity: [SEVERITY]",
    agent_id="your_agent_id",
    memory_type="decision"
  )
  ```

  If REJECTED:
  ```
  save_memory(
    content="REJECTED: [VULN_TYPE] in [ASSET] - failed validation because [REASON]. Do not retest this issue.",
    agent_id="your_agent_id",
    memory_type="warning"
  )
  ```

  Save validation techniques that worked:
  ```
  save_memory(
    content="Validation technique: Testing reproducibility 3+ times with fresh sessions caught intermittent bug that would have been rejected",
    agent_id="your_agent_id",
    memory_type="learning"
  )
  ```

  ═══════════════════════════════════════════════════════════════════════
  STEP 8: ENCOURAGE SPAWNING NEW TASKS
  ═══════════════════════════════════════════════════════════════════════

  During validation, you might discover related issues:

  Found a variant during testing? Create Phase 3 task:
  ```
  mcp__hephaestus__create_task({
    "description": "Phase 3: Investigate variant of [VULN] at [NEW_URL]",
    "done_definition": "Variant investigated, Phase 4 task created if valid",
    "agent_id": "agent-mcp",
    "phase_id": 3,
    "priority": "medium",
    "cwd": "."
  })
  ```

  Found entirely new attack surface? Create Phase 2 task.

  You CAN create Phase 2/3 tasks from Phase 4 - don't hold back!

  ═══════════════════════════════════════════════════════════════════════
  COMPLIANCE FINAL CHECK
  ═══════════════════════════════════════════════════════════════════════

  Before submitting, verify:
  ✅ Used only test accounts during discovery
  ✅ Respected rate limits throughout
  ✅ Did not access real user data
  ✅ Did not perform DoS attacks
  ✅ Stayed within allowed_domain.txt
  ✅ No sensitive data included in report
  ✅ No rules of engagement violated

  If ANY compliance violation occurred → DO NOT SUBMIT

  ═══════════════════════════════════════════════════════════════════════
  REMEMBER
  ═══════════════════════════════════════════════════════════════════════

  Quality over quantity. One high-quality submission is worth more than
  ten low-quality ones. Bad submissions can:
  - Get you banned from the program
  - Waste the security team's time
  - Damage your reputation
  - Hurt the bug bounty community

  When in doubt, reject and document why. You can always investigate
  further if needed.

Outputs: |
  - validation_results_[ID].md containing:
    * All 5 validation checks with results
    * Decision (submit or reject)
    * Detailed reasoning

  - IF SUBMITTED: validated_bug_[ID].md with:
    * Professional HackerOne-formatted report
    * Complete reproduction steps
    * Security impact analysis
    * Supporting evidence

  - IF REJECTED: rejection_[ID].md explaining why

  - Memory entries with validation results

  - submit_result call (only if all validations pass)

  - Optional: Additional Phase 2/3 tasks for new discoveries

Next_Steps: |
  If submitted: The workflow result validator will review your submission
  and attempt to reproduce the vulnerability. If validated, the bug will
  be submitted to HackerOne.

  If rejected: The finding is documented and saved to memory to prevent
  duplicate investigation.

  The workflow continues - other agents keep hunting for more vulnerabilities.
