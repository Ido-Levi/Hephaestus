description: |
  [This is Phase 3 - Deep Investigation & Exploitation Development]

  FOCUS: Take ONE potential vulnerability from Phase 2 and perform deep technical
  analysis. Develop a working proof of concept, assess real security impact, and
  determine if this is worthy of submission.

  Your task description specifies the exact potential vulnerability to investigate
  (URL, parameter, suspected issue type). Dig deep, test thoroughly, and create a
  Phase 4 validation task if this appears to be a real, exploitable vulnerability.

Done_Definitions:
  - OVERVIEW.md and compliance_rules.md have been read
  - Memories fetched to learn from related investigations
  - Specific potential vulnerability thoroughly investigated
  - Multiple exploitation techniques attempted
  - "Root cause identified and understood"
  - "Working proof of concept developed (if vulnerability is real)"
  - "Real security impact assessed and documented"
  - "Preliminary scope validation performed (asset + vuln type)"
  - All investigation details saved to memory
  - "Phase 4 validation task created (if vulnerability appears valid)"
  - "Optional: New Phase 2/3 tasks created for related discoveries"

working_directory: "."

validation:
  enabled: true
  criteria:
    - description: "Investigation report exists"
      check_type: "file_exists"
      target: ["investigation_*.md", "analysis_*.md", "vuln_*.md"]
      evidence_required: true

    - description: "Deep technical analysis performed"
      check_type: "file_contains"
      target: "investigation_*.md"
      pattern: ["root cause", "exploit", "payload", "testing"]

    - description: "Proof of concept developed (if vuln is real)"
      check_type: "manual_verification"
      evidence_required: false

    - description: "Security impact assessed"
      check_type: "file_contains"
      target: "investigation_*.md"
      pattern: ["impact", "severity", "risk"]

    - description: "Findings saved to memory"
      check_type: "manual_verification"
      evidence_required: true

    - description: "Phase 4 task created (if valid finding)"
      check_type: "manual_verification"
      evidence_required: false

  validator_instructions: |
    Verify that:
    - Deep technical investigation was performed (not superficial)
    - Multiple exploitation approaches were attempted
    - Root cause is understood and documented
    - If vulnerability is real: working PoC was developed
    - Security impact is clearly articulated
    - Preliminary scope check was performed
    - All findings saved to memory for hive mind
    - Phase 4 task created if vulnerability appears valid

    Note: It's acceptable to determine the finding is a false positive.
    The key is thorough investigation and proper documentation.

Additional_Notes: |
  🔬 YOU ARE A DEEP INVESTIGATOR 🔬

  Your task description tells you EXACTLY what to investigate.
  Example: "Investigate potential IDOR at https://example.com/api/user?id=123"

  ═══════════════════════════════════════════════════════════════════════
  STEP 1: PREPARATION AND CONTEXT GATHERING
  ═══════════════════════════════════════════════════════════════════════

  MANDATORY READING:
  1. OVERVIEW.md - Verify scope and severity definitions
  2. compliance_rules.md - Know the testing boundaries
  3. scope_analysis.md - Confirm asset and vuln type are in-scope

  FETCH MEMORIES EXTENSIVELY:
  - Has anyone investigated this area before?
  - What similar vulnerabilities have been found?
  - What exploitation techniques have worked?
  - What validation approaches have succeeded?
  - Are there any warnings about this area?

  Query memories with specific searches:
  - "IDOR" (if investigating access control)
  - "XSS bypass" (if investigating XSS)
  - The specific URL or endpoint
  - Related vulnerability patterns

  WHY: Learn from the hive mind. Other agents may have discovered
  techniques or bypasses that will help your investigation.

  ═══════════════════════════════════════════════════════════════════════
  STEP 2: PRELIMINARY SCOPE VALIDATION (CRITICAL)
  ═══════════════════════════════════════════════════════════════════════

  Before investing time in deep exploitation, verify this is in-scope:

  CHECK 1: Is the asset in-scope?
  - Confirm URL is within allowed_domain.txt
  - Check OVERVIEW.md to ensure domain is not explicitly out-of-scope
  - Verify not testing third-party service

  CHECK 2: Is the vulnerability type in-scope?
  - Confirm your suspected vulnerability type is in the in-scope list
  - Example: If you suspect XSS, verify XSS is in-scope
  - Check it's NOT in the out-of-scope vulnerability list

  CHECK 3: Review out-of-scope exceptions:
  - Self-XSS (usually out-of-scope unless you can chain it)
  - Theoretical issues without exploitability
  - Known issues (check memories for duplicates)

  If ANY scope check fails → Document why and STOP investigation.
  Do not waste time on out-of-scope issues.

  ═══════════════════════════════════════════════════════════════════════
  STEP 3: DEEP TECHNICAL INVESTIGATION
  ═══════════════════════════════════════════════════════════════════════

  Now dig deep into the specific potential vulnerability:

  A. UNDERSTAND THE FUNCTIONALITY:
     - What is this feature supposed to do?
     - What are the normal use cases?
     - How does it process user input?
     - What backend systems are involved?

  B. IDENTIFY THE ROOT CAUSE:
     - Why does this behavior occur?
     - What validation is missing or weak?
     - What assumptions does the code make?
     - Where is the security control failing?

  C. TEST MULTIPLE EXPLOITATION APPROACHES:

     GOAL: Thoroughly test if the suspected vulnerability is real and exploitable.

     Use your security testing expertise to:
     - Try multiple approaches and variations
     - Test different attack vectors
     - Attempt bypasses and edge cases
     - Verify exploitability, not just theoretical existence

     Consider testing:
     - Different user contexts (authenticated, unauthenticated, different roles)
     - Various input methods (different parameters, HTTP methods, headers)
     - Edge cases and boundary conditions
     - Bypass techniques specific to your vulnerability type

  D. DEVELOP WORKING PROOF OF CONCEPT:

     GOAL: Create a clear, reproducible demonstration of the vulnerability.

     Your PoC should:
     - Be minimal (only necessary steps, no extras)
     - Be reproducible (works consistently every time)
     - Demonstrate real impact (not just theoretical)
     - Be easy for validators to understand and run

     Include:
     - Clear step-by-step reproduction instructions
     - Any scripts, commands, or payloads used
     - Screenshots or logs showing the exploit working
     - Explanation of why this demonstrates a security issue

  ═══════════════════════════════════════════════════════════════════════
  STEP 4: ASSESS REAL SECURITY IMPACT
  ═══════════════════════════════════════════════════════════════════════

  Don't just find a bug - understand its IMPACT:

  Ask yourself:
  1. What can an attacker actually DO with this?
     - Access sensitive data? (Confidentiality impact)
     - Modify data? (Integrity impact)
     - Disrupt service? (Availability impact)

  2. How severe is this according to the program?
     - Check OVERVIEW.md severity definitions
     - Compare to example scenarios
     - Consider: Critical / High / Medium / Low

  3. What's the attack scenario?
     - Who can exploit this? (authenticated user, anonymous, etc.)
     - What do they gain?
     - How difficult is exploitation?
     - What's the business risk?

  4. Is this exploitable in practice?
     - Theoretical issues are usually rejected
     - Can you demonstrate real impact?
     - Does it require unlikely conditions?

  Document impact clearly:
  ```markdown
  ## Security Impact Analysis

  **Vulnerability Type**: Broken Access Control (IDOR)

  **Attack Scenario**:
  An authenticated attacker can access any user's profile data by
  manipulating the user_id parameter in the API request.

  **Impact**:
  - **Confidentiality**: HIGH - Can access all user PII (email, phone, address)
  - **Integrity**: MEDIUM - Can modify other users' profiles
  - **Availability**: NONE - No disruption possible

  **Severity Assessment**: HIGH (per program's severity definitions)

  **Business Risk**: Exposure of user PII, potential GDPR violations,
  reputational damage if exploited at scale.

  **Exploitability**: EASY - Requires only authenticated user account,
  user IDs are sequential and easily enumerable.
  ```

  ═══════════════════════════════════════════════════════════════════════
  STEP 5: SAVE TO MEMORY (CRITICAL FOR HIVE MIND)
  ═══════════════════════════════════════════════════════════════════════

  Document your investigation extensively:

  If vulnerability is REAL:
  ```
  save_memory(
    content="CONFIRMED: IDOR in /api/user endpoint - can access/modify any user by changing user_id parameter. Severity: HIGH",
    agent_id="your_agent_id",
    memory_type="discovery"
  )
  ```

  If vulnerability is FALSE POSITIVE:
  ```
  save_memory(
    content="FALSE POSITIVE: /api/user endpoint appeared to have IDOR but proper authorization checks exist. Initial observation was due to [reason]",
    agent_id="your_agent_id",
    memory_type="learning"
  )
  ```

  Save exploitation techniques that worked:
  ```
  save_memory(
    content="XSS bypass technique: Used <svg onload=> to bypass input filter that blocked <script> tags",
    agent_id="your_agent_id",
    memory_type="learning"
  )
  ```

  ═══════════════════════════════════════════════════════════════════════
  STEP 6: DECISION - CREATE PHASE 4 TASK OR NOT
  ═══════════════════════════════════════════════════════════════════════

  If ALL of these are TRUE:
  ✅ Vulnerability is real and reproducible
  ✅ Asset is in-scope
  ✅ Vulnerability type is in-scope
  ✅ Real security impact exists
  ✅ Working PoC developed

  Then CREATE PHASE 4 VALIDATION TASK:
  ```
  mcp__hephaestus__create_task({
    "description": "Phase 4: Validate and submit [VULN_TYPE] at [URL]",
    "done_definition": "Vulnerability rigorously validated, HackerOne report created and submitted if all checks pass",
    "agent_id": "agent-mcp",
    "phase_id": 4,
    "priority": "high",
    "cwd": "."
  })
  ```

  Example:
  ```
  mcp__hephaestus__create_task({
    "description": "Phase 4: Validate and submit IDOR vulnerability in /api/user endpoint",
    "done_definition": "IDOR thoroughly validated, scope confirmed, professional HackerOne report submitted",
    "agent_id": "agent-mcp",
    "phase_id": 4,
    "priority": "high",
    "cwd": "."
  })
  ```

  If vulnerability is FALSE POSITIVE or out-of-scope:
  - Document why in investigation report
  - Save to memory (prevents duplicate work)
  - Do NOT create Phase 4 task
  - Consider if related areas need investigation (create Phase 3 task)

  ═══════════════════════════════════════════════════════════════════════
  STEP 7: ENCOURAGE SPAWNING NEW TASKS
  ═══════════════════════════════════════════════════════════════════════

  You CAN and SHOULD create tasks for new discoveries:

  Found a related vulnerability? Create Phase 3 task:
  ```
  mcp__hephaestus__create_task({
    "description": "Phase 3: Investigate related [VULN_TYPE] at [RELATED_URL]",
    "done_definition": "Related vulnerability investigated, Phase 4 task created if valid",
    "agent_id": "agent-mcp",
    "phase_id": 3,
    "priority": "medium",
    "cwd": "."
  })
  ```

  Found entirely new attack surface? Create Phase 2 task:
  ```
  mcp__hephaestus__create_task({
    "description": "Phase 2: Hunt for [VULN_TYPE] on [NEW_AREA]",
    "done_definition": "New area thoroughly tested for [VULN_TYPE]",
    "agent_id": "agent-mcp",
    "phase_id": 2,
    "priority": "medium",
    "cwd": "."
  })
  ```

  Don't hold back - if you found something interesting, spawn a task!

  ═══════════════════════════════════════════════════════════════════════
  STEP 8: DOCUMENT YOUR INVESTIGATION
  ═══════════════════════════════════════════════════════════════════════

  Create investigation_[VULN_ID].md with:
  ```markdown
  # Deep Investigation Report - [VULNERABILITY_TYPE]

  ## Target
  - URL: [exact URL]
  - Parameter: [parameter name]
  - Suspected Issue: [what Phase 2 suspected]

  ## Scope Validation
  - ✅/❌ Asset in-scope: [verification]
  - ✅/❌ Vulnerability type in-scope: [verification]
  - ✅/❌ Not in out-of-scope list: [verification]

  ## Investigation Summary
  [Brief summary of what you discovered]

  ## Root Cause Analysis
  [Detailed explanation of WHY this vulnerability exists]

  ## Exploitation Techniques Tested
  1. [Technique 1]: [Result]
  2. [Technique 2]: [Result]
  3. [Technique 3]: [Result]

  ## Working Proof of Concept
  ```[language]
  [PoC code or steps]
  ```

  ## Evidence
  - Screenshot 1: [description]
  - Network log: [relevant request/response]
  - Error message: [if applicable]

  ## Security Impact
  - Confidentiality: [HIGH/MEDIUM/LOW/NONE]
  - Integrity: [HIGH/MEDIUM/LOW/NONE]
  - Availability: [HIGH/MEDIUM/LOW/NONE]
  - Business Risk: [description]
  - Severity Assessment: [CRITICAL/HIGH/MEDIUM/LOW]

  ## Conclusion
  ✅ VALID - Proceed to Phase 4 validation
  OR
  ❌ FALSE POSITIVE - [Explanation]
  OR
  ❌ OUT OF SCOPE - [Explanation]

  ## Next Steps
  [Phase 4 task created / No further action needed]
  ```

  ═══════════════════════════════════════════════════════════════════════
  COMPLIANCE REMINDERS
  ═══════════════════════════════════════════════════════════════════════

  During investigation, you MUST:
  ✅ Use only test accounts you created
  ✅ Respect rate limits
  ✅ Stop if you access real user data
  ✅ Stay within allowed_domain.txt
  ✅ Not perform DoS attacks
  ✅ Not access data beyond what's needed for PoC

  DO NOT:
  - Skip scope validation (critical!)
  - Create Phase 4 task for false positives
  - Forget to save findings to memory
  - Test outside compliance boundaries
  - Submit theoretical issues without real impact

Outputs: |
  - investigation_[VULN_ID].md containing:
    * Scope validation results
    * Root cause analysis
    * Exploitation techniques tested
    * Working proof of concept (if real)
    * Security impact assessment
    * Conclusion (valid/false positive/out-of-scope)

  - PoC script or detailed steps (if vulnerability is real)

  - Evidence files (screenshots, logs, etc.)

  - Memory entries with investigation results

  - Phase 4 validation task (if vulnerability is valid)

  - Optional: Additional Phase 2/3 tasks for new discoveries

Next_Steps: |
  If vulnerability is valid: Phase 4 will rigorously validate, create a
  professional HackerOne report, and submit if all validation checks pass.

  If false positive: Investigation documented, memory updated, no further action.
