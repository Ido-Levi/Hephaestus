description: |
  [This is Phase 1 - Program Intelligence & Strategic Planning]

  FOCUS: Parse the bug bounty program, understand all boundaries and compliance
  requirements, then spawn EXTENSIVE Phase 2 exploration tasks.

  Read OVERVIEW.md and allowed_domain.txt, extract scope and rules, create testing
  infrastructure, and spawn ONE Phase 2 task for EACH in-scope vulnerability type.
  This enables massive parallel exploration with specialized vulnerability hunters.

Done_Definitions:
  - OVERVIEW.md has been read and thoroughly analyzed
  - allowed_domain.txt has been read to identify target domain
  - "All in-scope vulnerability types extracted and documented"
  - "All out-of-scope items (assets + vulnerability types) documented"
  - "Rules of engagement and compliance requirements documented"
  - "Rate limits and testing constraints identified and documented"
  - Test accounts created using @wearehackerone.com email aliases
  - "CRITICAL: ONE Phase 2 task created for EACH in-scope vulnerability type"
  - "Each Phase 2 task assigned a specific vulnerability type to hunt"
  - All scope information and compliance rules saved to memory

working_directory: "."

validation:
  enabled: true
  criteria:
    - description: "Program scope analysis completed"
      check_type: "file_exists"
      target: ["scope_analysis.md", "program_analysis.md"]
      evidence_required: true

    - description: "In-scope vulnerability types documented"
      check_type: "file_contains"
      target: "scope_analysis.md"
      pattern: ["in-scope", "vulnerability", "OWASP"]

    - description: "Out-of-scope items clearly documented"
      check_type: "file_contains"
      target: "scope_analysis.md"
      pattern: ["out-of-scope", "out of scope", "prohibited"]

    - description: "Rules of engagement documented"
      check_type: "file_exists"
      target: ["compliance_rules.md", "rules_of_engagement.md"]
      evidence_required: true

    - description: "Test accounts created"
      check_type: "file_exists"
      target: ["test_accounts.md", "testing_setup.md"]

    - description: "Phase 2 tasks created for vulnerability types"
      check_type: "manual_verification"
      evidence_required: true

  validator_instructions: |
    Verify that the agent has:
    - Successfully parsed OVERVIEW.md for all scope information
    - Identified ALL in-scope vulnerability types
    - Documented ALL out-of-scope restrictions
    - Extracted rules of engagement and compliance requirements
    - Created appropriate test accounts with @wearehackerone.com aliases
    - Created ONE Phase 2 task for EACH vulnerability type
    - Saved critical scope and compliance info to memory

    CRITICAL: Ensure Phase 2 tasks were actually created via MCP endpoint.
    Each task should be assigned a specific vulnerability type to hunt.

Additional_Notes: |
  🚨 YOUR MISSION: UNDERSTAND THE PROGRAM + SPAWN MASSIVE EXPLORATION! 🚨

  ═══════════════════════════════════════════════════════════════════════
  STEP 1: READ AND PARSE CRITICAL FILES
  ═══════════════════════════════════════════════════════════════════════

  Read OVERVIEW.md carefully and extract:

  A. IN-SCOPE VULNERABILITY TYPES (Examples):
     - Broken Access Control
     - Remote Code Execution (RCE)
     - Injection (SQL, Command, LDAP, etc.)
     - Cross-Site Scripting (XSS)
     - Server-Side Request Forgery (SSRF)
     - Insecure Design
     - Security Misconfiguration
     - Account Takeover (ATO)
     - Authentication Failures
     - Cryptographic Failures
     - [Any others listed in OVERVIEW.md]

  B. OUT-OF-SCOPE VULNERABILITY TYPES (Examples):
     - Denial of Service (DoS/DDoS)
     - Social Engineering
     - Clickjacking (unless specific impact)
     - Missing security headers
     - SSL/TLS best practices
     - Automated tool reports without PoC
     - Self-XSS without chaining
     - [Any others listed in OVERVIEW.md]

  C. OUT-OF-SCOPE ASSETS:
     - Domains/subdomains explicitly listed as out-of-scope
     - Third-party services
     - [Any others listed in OVERVIEW.md]

  D. RULES OF ENGAGEMENT (CRITICAL):
     - Rate limiting requirements (e.g., max 3 requests/second)
     - Forbidden actions (DoS, social engineering, etc.)
     - Data access restrictions
     - Account usage requirements
     - When to stop testing immediately

  Read allowed_domain.txt:
  - This contains the SINGLE domain to focus exploration on
  - All testing MUST be confined to this domain
  - Do not test other domains even if they are in-scope

  ═══════════════════════════════════════════════════════════════════════
  STEP 2: CREATE TESTING INFRASTRUCTURE
  ═══════════════════════════════════════════════════════════════════════

  Set up test accounts:
  1. Generate email aliases using @wearehackerone.com format
     - Example: yourhandle@wearehackerone.com
     - This is your HackerOne-provided email alias

  2. Create test accounts on the target platform:
     - Register using @wearehackerone.com email
     - Document all created accounts in test_accounts.md
     - Include: email, account ID, permissions, purpose

  3. Document testing setup:
     - Tools that can be used (curl, browser automation, etc.)
     - Rate limiting configuration
     - Compliance checklist

  CRITICAL: All Phase 2+ agents MUST use these test accounts ONLY.
  Testing on real user accounts is STRICTLY FORBIDDEN.

  ═══════════════════════════════════════════════════════════════════════
  STEP 3: CREATE COMPREHENSIVE DOCUMENTATION
  ═══════════════════════════════════════════════════════════════════════

  Create scope_analysis.md with:
  ```markdown
  # Bug Bounty Program Scope Analysis

  ## Target Domain
  [Domain from allowed_domain.txt]

  ## In-Scope Vulnerability Types
  1. [Vulnerability Type 1]
     - Description: [Brief description]
     - Severity potential: [Critical/High/Medium/Low]

  2. [Vulnerability Type 2]
     ...

  ## Out-of-Scope Vulnerability Types
  - [Type 1]: [Why it's out of scope]
  - [Type 2]: [Why it's out of scope]
  ...

  ## Out-of-Scope Assets
  - [Asset 1]
  - [Asset 2]
  ...

  ## Additional Restrictions
  [Any special restrictions from OVERVIEW.md]
  ```

  Create compliance_rules.md with:
  ```markdown
  # Rules of Engagement - MUST FOLLOW

  ## Rate Limiting
  - [Specific rate limit, e.g., "Max 3 requests/second"]
  - [Tool configuration to enforce this]

  ## FORBIDDEN ACTIONS
  ❌ [Forbidden action 1]
  ❌ [Forbidden action 2]
  ...

  ## REQUIRED PRACTICES
  ✅ [Required practice 1]
  ✅ [Required practice 2]
  ...

  ## STOP TESTING IMMEDIATELY IF:
  🛑 [Condition 1, e.g., "Unauthorized access to sensitive data"]
  🛑 [Condition 2, e.g., "Compromised account discovered"]
  ...

  ## Account Requirements
  - Use only @wearehackerone.com email accounts
  - Do not test on real user accounts
  - [Other requirements]
  ```

  ═══════════════════════════════════════════════════════════════════════
  STEP 4: SAVE TO MEMORY (CRITICAL FOR HIVE MIND)
  ═══════════════════════════════════════════════════════════════════════

  Use save_memory extensively to document:

  Memory Type: codebase_knowledge
  - "Target domain: [domain from allowed_domain.txt]"
  - "Rate limit: [specific limit]"
  - "In-scope vulnerability types: [list]"

  Memory Type: warning
  - "OUT OF SCOPE - Do NOT test: [each out-of-scope item]"
  - "FORBIDDEN ACTION: [each forbidden action]"

  Memory Type: decision
  - "Program policy requires: [each critical requirement]"
  - "Must use @wearehackerone.com accounts only"

  WHY: All Phase 2+ agents will fetch these memories to understand
  boundaries and avoid violations. This is CRITICAL for compliance.

  ═══════════════════════════════════════════════════════════════════════
  STEP 5: SPAWN PHASE 2 TASKS (MANDATORY)
  ═══════════════════════════════════════════════════════════════════════

  Create ONE Phase 2 task for EACH in-scope vulnerability type.

  Use the MCP endpoint: mcp__hephaestus__create_task

  For EACH vulnerability type, create a task with:

  Required parameters:
  - description: "Phase 2: Hunt for [VULNERABILITY_TYPE] on [DOMAIN]"
    Examples:
    * "Phase 2: Hunt for Broken Access Control on example.com"
    * "Phase 2: Hunt for Cross-Site Scripting (XSS) on example.com"
    * "Phase 2: Hunt for SQL Injection on example.com"

  - done_definition: "[VULNERABILITY_TYPE] testing completed, all findings reported, Phase 3 tasks created for any discoveries"

  - agent_id: "agent-mcp"

  - phase_id: 2

  - priority: "high"

  - cwd: "." (current working directory)

  Example task creation:
  ```
  mcp__hephaestus__create_task({
    "description": "Phase 2: Hunt for Broken Access Control on example.com",
    "done_definition": "Broken Access Control testing completed on example.com, all IDOR/privilege escalation vectors explored, Phase 3 tasks created for any findings",
    "agent_id": "agent-mcp",
    "phase_id": 2,
    "priority": "high",
    "cwd": "."
  })
  ```

  Repeat for EVERY in-scope vulnerability type!

  Typical programs have 10-15 vulnerability types = 10-15 Phase 2 tasks.

  ═══════════════════════════════════════════════════════════════════════
  EXPECTED OUTCOMES
  ═══════════════════════════════════════════════════════════════════════

  After this phase completes:
  - Full understanding of program scope and rules
  - 10-15+ Phase 2 vulnerability hunters spawned
  - Testing infrastructure ready
  - Compliance rules clearly documented
  - Memory system populated with critical program info
  - Massive parallel exploration begins!

  DO NOT:
  - Do any vulnerability testing (that's Phase 2's job)
  - Create fewer Phase 2 tasks than vulnerability types
  - Skip saving to memory (critical for hive mind)
  - Forget to read allowed_domain.txt

Outputs: |
  - scope_analysis.md containing:
    * Target domain from allowed_domain.txt
    * All in-scope vulnerability types
    * All out-of-scope items (assets + vulnerability types)
    * Program severity definitions

  - compliance_rules.md containing:
    * Rate limits and testing constraints
    * Forbidden actions (with clear warnings)
    * Required practices
    * When to stop testing immediately

  - test_accounts.md containing:
    * Created @wearehackerone.com test accounts
    * Account credentials and IDs
    * Account purposes and permissions

  - Memory entries with program scope and rules

  - ONE Phase 2 task for EACH in-scope vulnerability type

Next_Steps: |
  Phase 2 vulnerability hunters will launch in parallel, each specializing in
  hunting one specific vulnerability type across the target domain. They will
  perform extensive reconnaissance and exploration, creating Phase 3 tasks
  whenever potential vulnerabilities are discovered.
