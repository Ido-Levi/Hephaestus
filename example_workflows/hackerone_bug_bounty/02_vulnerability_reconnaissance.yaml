description: |
  [This is Phase 2 - Vulnerability-Specific Heavy Reconnaissance]

  FOCUS: EXTENSIVELY explore the target domain hunting for ONE specific vulnerability
  type. You are a specialized hunter - ravage through the site, enumerate everything,
  test thoroughly, and create Phase 3 tasks for ANY suspicious findings.

  Your task description specifies YOUR vulnerability type (e.g., "XSS", "Broken Access
  Control", "SSRF"). Focus exclusively on hunting for your assigned type while
  respecting all compliance rules.

Done_Definitions:
  - OVERVIEW.md, allowed_domain.txt, and compliance_rules.md have been read
  - Memories fetched to see what other agents have discovered
  - "EXTENSIVE exploration of the target domain completed"
  - "All pages, endpoints, and features mapped for your vulnerability type"
  - "Google dorking performed to discover hidden endpoints"
  - "Browser automation used to interact with dynamic content"
  - "All input points, parameters, and attack surface enumerated"
  - "Testing performed for your specific vulnerability type"
  - "All findings saved to memory immediately upon discovery"
  - "Phase 3 task created for EVERY potential vulnerability found"
  - "Optional: Additional Phase 2 tasks created for newly discovered areas"
  - No compliance violations occurred during testing

working_directory: "."

validation:
  enabled: true
  criteria:
    - description: "Reconnaissance report exists"
      check_type: "file_exists"
      target: ["recon_*.md", "reconnaissance_*.md", "exploration_*.md"]
      evidence_required: true

    - description: "Extensive exploration was performed"
      check_type: "file_contains"
      target: "recon_*.md"
      pattern: ["enumeration", "endpoint", "parameter", "tested"]

    - description: "Vulnerability-specific testing documented"
      check_type: "manual_verification"
      evidence_required: true

    - description: "Findings saved to memory"
      check_type: "manual_verification"
      evidence_required: true

    - description: "Phase 3 tasks created for findings (if any)"
      check_type: "manual_verification"
      evidence_required: false

    - description: "Compliance rules respected"
      check_type: "manual_verification"
      evidence_required: true

  validator_instructions: |
    Verify that:
    - Agent performed EXTENSIVE (not superficial) exploration
    - Testing focused on assigned vulnerability type
    - Multiple techniques used (Google dorking, browser automation, etc.)
    - All findings properly documented
    - Memories saved for hive mind coordination
    - Phase 3 tasks created for any potential vulnerabilities
    - No compliance violations occurred
    - Rate limits and rules of engagement respected

    Note: Finding zero vulnerabilities is acceptable if exploration was thorough.
    The focus is on comprehensive testing, not necessarily finding bugs.

Additional_Notes: |
  🎯 YOU ARE A SPECIALIZED VULNERABILITY HUNTER 🎯

  Your task description tells you which vulnerability type to hunt for.
  Examples: "XSS Hunter", "Broken Access Control Hunter", "SSRF Hunter"

  ═══════════════════════════════════════════════════════════════════════
  STEP 1: READ CRITICAL FILES AND FETCH MEMORIES
  ═══════════════════════════════════════════════════════════════════════

  MANDATORY READING:
  1. OVERVIEW.md - Understand scope, rules, severity definitions
  2. allowed_domain.txt - Confirm your target domain
  3. compliance_rules.md - Know the boundaries (CRITICAL)
  4. scope_analysis.md - Review in-scope and out-of-scope items

  FETCH MEMORIES EXTENSIVELY (use mcp__hephaestus__get_memories or similar):
  - What have other agents discovered?
  - What endpoints have been tested?
  - What areas should you avoid (already covered)?
  - What findings have been reported?
  - What compliance issues were noted?

  WHY: This is HIVE MIND coordination. You must learn from other agents
  to avoid duplicate work and build on their discoveries.

  ═══════════════════════════════════════════════════════════════════════
  STEP 2: EXTENSIVE DOMAIN RECONNAISSANCE
  ═══════════════════════════════════════════════════════════════════════

  GOAL: Comprehensively map the attack surface for your vulnerability type.

  This is NOT quick recon - this is DEEP, THOROUGH exploration.
  Spend significant time here. Leave no stone unturned.

  WHAT YOU NEED TO ACCOMPLISH:

  1. DISCOVER HIDDEN CONTENT AND ENDPOINTS
     - Find pages, APIs, and features that aren't obviously linked
     - Identify interesting functionality relevant to your vulnerability type
     - Locate user input points, parameters, and data flows

  2. MAP THE ENTIRE ATTACK SURFACE
     - Enumerate all URLs, endpoints, and parameters
     - Document authentication requirements and access controls
     - Identify where user data flows through the application
     - Note technologies, frameworks, and patterns used

  3. INTERACT WITH DYNAMIC FUNCTIONALITY
     - Test JavaScript-heavy pages and SPAs
     - Exercise all features and user workflows
     - Capture network traffic to find hidden APIs
     - Create test accounts and explore authenticated areas

  EXPLORATION APPROACHES (choose what works best):
     - Search engines for indexed content and patterns
     - Automated tools for enumeration (respecting rate limits!)
     - Browser automation for interacting with dynamic sites
     - Manual exploration clicking through features
     - Source code analysis of JavaScript files
     - Network traffic inspection

  CRITICAL COMPLIANCE:
     ❌ Do NOT use aggressive scanners that violate rate limits
     ❌ Do NOT use tools that cause DoS conditions
     ✅ DO respect rate limits (check compliance_rules.md)
     ✅ DO use controlled, thoughtful exploration
     ✅ DO use only test accounts you created

  ═══════════════════════════════════════════════════════════════════════
  STEP 3: VULNERABILITY-SPECIFIC TESTING
  ═══════════════════════════════════════════════════════════════════════

  GOAL: Test for your assigned vulnerability type across all discovered endpoints.

  Your task description specifies which vulnerability type to hunt for.
  You are the specialist - use your expertise and judgment to test comprehensively.

  GENERAL APPROACH FOR ALL VULNERABILITY TYPES:

  1. IDENTIFY RELEVANT ATTACK SURFACE
     - Find endpoints, parameters, and features related to your vuln type
     - Focus on areas where this vulnerability typically occurs
     - Prioritize high-value targets (authentication, data access, etc.)

  2. TEST SYSTEMATICALLY
     - Test each relevant endpoint/parameter for your vulnerability
     - Try multiple approaches and variations
     - Look for edge cases and bypasses
     - Document what you test and the results

  3. ASSESS FINDINGS
     - Determine if observed behavior indicates a vulnerability
     - Consider if it's exploitable or just interesting behavior
     - Evaluate potential security impact
     - Create Phase 3 tasks for anything suspicious

  EXAMPLE FOCUS AREAS BY VULNERABILITY TYPE:

  - **Access Control**: Authorization checks, ID parameters, privilege levels
  - **XSS**: Input reflection, output encoding, CSP policies
  - **Injection**: Input validation, query construction, error messages
  - **SSRF**: URL parameters, webhooks, external resource fetching
  - **Authentication**: Login flows, session management, password reset
  - **Cryptographic**: Encryption methods, key storage, random generation

  Use your knowledge of security testing to determine the best approach
  for your specific vulnerability type and target application.

  CRITICAL COMPLIANCE DURING TESTING:
  ✅ Respect rate limits (check compliance_rules.md for specifics)
  ✅ Use only your test accounts
  ✅ Do not access real user data
  ✅ Stop immediately if you gain unauthorized access
  ✅ Do not perform DoS attacks
  ✅ No aggressive automated scanning

  ═══════════════════════════════════════════════════════════════════════
  STEP 4: SAVE TO MEMORY CONSTANTLY (CRITICAL FOR HIVE MIND)
  ═══════════════════════════════════════════════════════════════════════

  GOAL: Share your discoveries with other agents to enable collaboration.

  Save memories IMMEDIATELY when you discover anything significant:

  WHAT TO SAVE:
  - Interesting endpoints or APIs you discovered
  - Potential vulnerabilities you found (even if not confirmed)
  - Areas you tested thoroughly with no findings
  - Techniques or approaches that worked/didn't work
  - Compliance issues or warnings
  - Patterns or technologies observed

  WHY IT MATTERS:
  - Prevents other agents from duplicating your work
  - Allows agents to build on your discoveries
  - Enables the hive mind to coordinate effectively
  - Shares knowledge about what works and what doesn't

  Use save_memory with appropriate memory_type:
  - discovery: New findings, endpoints, potential vulns
  - learning: Techniques, patterns, what was tested
  - warning: Compliance issues, out-of-scope items
  - codebase_knowledge: Technologies, frameworks observed

  ═══════════════════════════════════════════════════════════════════════
  STEP 5: CREATE PHASE 3 TASKS FOR FINDINGS
  ═══════════════════════════════════════════════════════════════════════

  GOAL: Spawn deep investigation tasks for every potential vulnerability.

  For EACH suspicious finding, create a Phase 3 task using the MCP endpoint.

  INCLUDE IN THE TASK DESCRIPTION:
  - What vulnerability type you suspect
  - Where it's located (URL, endpoint, parameter)
  - What makes it suspicious
  - Any initial observations

  Don't be shy - create a Phase 3 task for ANYTHING that could be a vulnerability!
  The Phase 3 agent will do thorough investigation to determine if it's real.

  Even low-confidence findings are worth investigating - better to have
  Phase 3 determine it's a false positive than to miss a real bug.

  ═══════════════════════════════════════════════════════════════════════
  STEP 6: SPAWN ADDITIONAL TASKS FOR NEW DISCOVERIES
  ═══════════════════════════════════════════════════════════════════════

  GOAL: Create tasks for newly discovered areas that need investigation.

  You CAN and SHOULD create additional Phase 2 or Phase 3 tasks if you discover:
  - New subdomains or endpoints requiring separate hunting
  - Different vulnerability types than your specialty
  - Areas needing specialized testing approaches
  - Related attack surfaces worth exploring

  Don't worry about creating duplicate tasks - the novelty detection system
  will filter them out if they're truly duplicates.

  ═══════════════════════════════════════════════════════════════════════
  STEP 7: DOCUMENT YOUR EXPLORATION
  ═══════════════════════════════════════════════════════════════════════

  Create recon_[VULN_TYPE]_[DOMAIN].md with:
  ```markdown
  # [VULNERABILITY_TYPE] Reconnaissance Report

  ## Target
  Domain: [from allowed_domain.txt]
  Vulnerability Type: [your assigned type]

  ## Exploration Summary
  - Pages visited: [count]
  - Endpoints discovered: [count]
  - Parameters tested: [count]
  - Interesting findings: [count]

  ## Discovered Endpoints
  1. https://[domain]/path1
     - Method: GET/POST
     - Parameters: param1, param2
     - Authentication: Required/Not required
     - Notes: [observations]

  2. [Continue...]

  ## Testing Performed
  - [Describe testing approaches used]
  - [Tools used: curl, Playwright, manual testing]
  - [Payloads tested]

  ## Findings
  1. **Potential [VULN_TYPE] at [URL]**
     - Parameter: [param]
     - Observation: [what you saw]
     - Phase 3 task created: [task ID]

  2. [Continue...]

  ## Areas Thoroughly Tested (No Issues Found)
  - [Area 1]: Tested for [vulnerability], no issues
  - [Area 2]: Tested for [vulnerability], properly protected

  ## Compliance
  - Rate limits respected: Yes
  - Test accounts used: Yes
  - No real user data accessed: Confirmed
  - No violations: Confirmed
  ```

  ═══════════════════════════════════════════════════════════════════════
  EXPECTED OUTCOMES
  ═══════════════════════════════════════════════════════════════════════

  After this phase:
  - Thorough exploration of domain for your vulnerability type
  - All interesting areas documented
  - 0-10+ Phase 3 investigation tasks created
  - Memories populated for other agents
  - Optional: Additional Phase 2 tasks for new discoveries
  - Clean reconnaissance report

  Finding zero vulnerabilities is ACCEPTABLE if exploration was thorough!

  DO NOT:
  - Rush through exploration (take your time!)
  - Skip saving to memory (critical!)
  - Test outside allowed_domain.txt
  - Violate rate limits or rules of engagement
  - Test only a few pages (explore EXTENSIVELY)

Outputs: |
  - recon_[VULN_TYPE]_[DOMAIN].md containing:
    * Comprehensive exploration summary
    * All discovered endpoints and parameters
    * Testing methodology and results
    * All findings (even minor ones)
    * Areas tested with no issues

  - Optional: Playwright/Puppeteer scripts used for exploration

  - Memory entries documenting discoveries and tested areas

  - Phase 3 tasks for EACH potential vulnerability (0-10+)

  - Optional: Additional Phase 2 tasks for newly discovered areas

Next_Steps: |
  Phase 3 investigators will take each potential vulnerability you discovered
  and perform deep analysis to determine if it's a real, exploitable security
  issue worthy of submission to HackerOne.
