description: |
  [This is Phase 1 - Created by Phase 0 initialization]
  FOCUS: Reproduce the issue and create MULTIPLE Phase 2 exploration tasks.
  Read PROBLEM_STATEMENT.md, reproduce the issue with clear steps, create reproduction
  scripts, and spawn MULTIPLE Phase 2 tasks to explore different solution approaches.
  DO NOT implement solutions - only reproduce and document the issue clearly.

Done_Definitions:
  - Problem statement from PROBLEM_STATEMENT.md has been thoroughly analyzed
  - Issue has been successfully reproduced with clear, repeatable steps
  - reproduction.md file created with exact commands to reproduce the issue
  - Custom reproduction scripts created if needed (e.g., test_reproduction.py)
  - Test commands documented and verified to show the issue
  - "CRITICAL: At least 2-3 Phase 2 tasks created to explore different solution approaches"
  - Each Phase 2 task explores a different potential fix location or approach

working_directory: "/Users/idol/SWEBench_Hep_Problems/sphinx-doc__sphinx-7757/sphinx"

validation:
  enabled: true
  criteria:
    - description: "Issue requirements are documented"
      check_type: "file_exists"
      target: ["issue_analysis.md", "requirements.md", "problem_analysis.md"]
      evidence_required: true

    - description: "Reproduction script or steps documented (for bugs)"
      check_type: "manual_verification"
      evidence_required: true

    - description: "Test commands identified and documented"
      check_type: "file_contains"
      target: "issue_analysis.md"
      pattern: ["test", "pytest", "unittest", "make test", "tox"]

    - description: "Expected behavior clearly defined"
      check_type: "manual_verification"
      evidence_required: true

  validator_instructions: |
    Verify that the agent has:
    - Correctly understood the problem statement
    - Identified all requirements and edge cases
    - Successfully reproduced the issue (for bugs)
    - Documented clear success criteria
    - Identified how to run relevant tests
    - Created appropriate documentation

Additional_Notes: |
  🚨 CRITICAL: YOUR MAIN GOAL IS REPRODUCTION + CREATING MULTIPLE P2 TASKS! 🚨

  MANDATORY TASK CREATION:
  ═══════════════════════════════════════════════════════════════════════
  You MUST create AT LEAST 2-3 Phase 2 tasks to explore different solutions:

  Examples:
  - "Phase 2: Explore fixing issue in [module A] by modifying [function X]"
  - "Phase 2: Investigate alternative approach via [module B]"
  - "Phase 2: Try fixing by adjusting [specific logic] in [file Y]"

  Each with phase_id=2 and different exploration angles!
  ═══════════════════════════════════════════════════════════════════════

  YOUR WORKFLOW:
  1. Read PROBLEM_STATEMENT.md carefully
  2. Reproduce the issue with minimal test case
  3. Create reproduction.md with EXACT commands:
     ```bash
     cd /path/to/repo
     python test_script.py  # Shows the error
     ```
  4. Write custom scripts if needed (test_reproduction.py)
  5. Identify 2-3 DIFFERENT potential fix locations/approaches
  6. Create a Phase 2 task for EACH approach

  DO NOT:
  - Write implementation guides (that's Phase 2's job)
  - Try to fix the issue (Phase 3 does that)
  - Create only one Phase 2 task (MUST be multiple!)

  Start by carefully reading PROBLEM_STATEMENT.md. Extract:
  1. What is broken or needs to be added
  2. Expected behavior after the fix
  3. Any specific test cases mentioned
  4. Edge cases or special conditions
  5. Related files or modules mentioned

  For bugs, create a minimal reproduction script that demonstrates the issue.
  This will be crucial for verifying your fix later.

  Use save_memory to document:
  - Key requirements from the issue
  - Reproduction steps and results
  - Initial hypotheses about the cause
  - Test commands and their current output

  Document everything in an issue_analysis.md file that will guide the next phases.

Outputs: |
  - reproduction.md containing:
    * Clear, step-by-step commands to reproduce the issue
    * Expected vs actual behavior
    * Exact error messages or incorrect outputs
    * Test commands that demonstrate the problem
  - Custom reproduction scripts (e.g., test_reproduction.py) if needed
  - Multiple Phase 2 tasks exploring different solution approaches

Next_Steps: |
  Create AT LEAST 2-3 Phase 2 tasks, each exploring a different potential solution.
  Pass along the reproduction.md file path to each task. Phase 2 tasks will each
  write their own implementation.md with their proposed solution approach.