description: |
  Comprehensive testing and verification of the implemented solution. This phase runs
  all tests, verifies the fix works correctly, ensures no regression, generates the
  patch, and prepares the final submission. This is the final quality gate before
  submitting the solution.

Done_Definitions:
  - Full test suite has been run and ALL tests pass
  - Original issue/bug is verified as fixed
  - No regression in existing functionality
  - Git patch generated and validated
  - All issue requirements confirmed as met
  - "CRITICAL: If solution works, submit_result has been called with comprehensive evidence"

working_directory: "/Users/idol/SWEBench_Hep_Problems/sphinx-doc__sphinx-7757/sphinx"

#validation:
#  enabled: true
#  criteria:
#    - description: "Test suite passes completely"
#      check_type: "test_pass"
#      command: "{test_command}"
#      evidence_required: true
#
#    - description: "Specific issue is verified as fixed"
#      check_type: "manual_verification"
#      evidence_required: true
#
#    - description: "No regression in existing tests"
#      check_type: "manual_verification"
#      evidence_required: true
#
#    - description: "Git patch generated"
#      check_type: "file_exists"
#      target: ["solution.patch", "fix.patch", "*.patch"]
#      evidence_required: true
#
#    - description: "Solution submitted if successful"
#      check_type: "manual_verification"
#      evidence_required: true
#
#  validator_instructions: |
#    Ensure comprehensive verification:
#    - ALL tests pass with no failures
#    - The specific issue is demonstrably fixed
#    - No existing functionality is broken
#    - Patch is clean and minimal
#    - If successful, submit_result was called
#    - All evidence is included in submission

Additional_Notes: |
  🚨 TWO CRITICAL PATHS: SUCCESS → SUBMIT | FAILURE → NEW TASKS! 🚨

  PATH 1 - SUCCESS (All tests pass):
  ═══════════════════════════════════════════════════════════════════════
  USE submit_result with markdown containing:
  1. Problem Summary
  2. Solution Overview
  3. Test Results (FULL output)
  4. Git Patch (MANDATORY!)

  PATH 2 - FAILURE (Tests fail or issue not fixed):
  ═══════════════════════════════════════════════════════════════════════
  CREATE NEW EXPLORATION TASKS:

  - Still not working? → Create NEW Phase 1 task:
    "Phase 1: Re-analyze issue with focus on [new area]" (phase_id=1)

  - Need different approach? → Create NEW Phase 2 tasks:
    "Phase 2: Explore fixing via [different module]" (phase_id=2)
    "Phase 2: Try alternative approach using [different strategy]" (phase_id=2)

  - Create MULTIPLE new directions to explore!

  TESTING STEPS:
  1. Run FULL test suite
  2. Verify reproduction case is fixed
  3. Check for regressions
  4. If ALL pass → submit_result
  5. If ANY fail → create new P1/P2 tasks for different approaches

  IMPORTANT: Don't get stuck on one approach. If it's not working,
  spawn new exploration tasks to try completely different solutions!

Outputs: |
  - Complete test suite output showing all tests passing
  - Evidence of the specific issue being fixed
  - Generated git patch file (solution.patch)
  - solution_submission.md with comprehensive documentation
  - CRITICAL: submit_result call if solution is valid

Next_Steps: |
  - If ALL tests pass and issue is fixed: submit_result immediately!
  - If tests fail: Create Phase 3 task to fix the implementation
  - If issue not fully fixed: Create appropriate phase task to address
  - Never leave a working solution unsubmitted!